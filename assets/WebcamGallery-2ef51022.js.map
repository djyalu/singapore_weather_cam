{"version":3,"file":"WebcamGallery-2ef51022.js","sources":["../../src/components/webcam/WebcamCard.jsx","../../src/components/webcam/LiveWebcamFeed.jsx","../../src/components/webcam/WebcamGallery.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst WebcamCard = ({ webcam, onClick }) => {\n  const { name, location, file_info, ai_analysis, capture_time, type } = webcam;\n  const [imageKey, setImageKey] = React.useState(Date.now());\n  const [imageLoading, setImageLoading] = React.useState(true);\n  const [imageError, setImageError] = React.useState(false);\n  const [retryCount, setRetryCount] = React.useState(0);\n\n  // 이미지 URL 생성 - 로컬 경로 우선, fallback 체인 구현\n  const basePath = import.meta.env.BASE_URL || '/';\n  const imageUrl = file_info?.url || file_info?.source_url || file_info?.path ?\n    (file_info.url || file_info.source_url || `${basePath}${file_info.path}`) :\n    `${basePath}images/placeholder.jpg`;\n\n  // 이미지 로딩 상태 관리\n  const handleImageLoad = () => {\n    setImageLoading(false);\n    setImageError(false);\n  };\n\n  const handleImageError = () => {\n    setImageLoading(false);\n    setImageError(true);\n    // 3회까지 재시도\n    if (retryCount < 3) {\n      setTimeout(() => {\n        setRetryCount(prev => prev + 1);\n        setImageKey(Date.now());\n      }, 1000 + retryCount * 1000); // 점진적 지연\n    }\n  };\n\n  // 재시도 시 로딩 상태 초기화\n  React.useEffect(() => {\n    if (retryCount > 0) {\n      setImageLoading(true);\n      setImageError(false);\n    }\n  }, [retryCount]);\n\n  // 30초마다 이미지 새로고침 (실시간 효과)\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      setImageKey(Date.now());\n    }, 30000); // 30초\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div\n      className=\"card cursor-pointer hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1\"\n      onClick={onClick}\n    >\n      <div className=\"relative\">\n        {/* 로딩 상태 표시 */}\n        {imageLoading && (\n          <div className=\"w-full h-48 bg-gray-200 rounded-md mb-4 flex items-center justify-center\">\n            <div className=\"text-gray-500 text-sm\">로딩 중...</div>\n          </div>\n        )}\n\n        {/* 에러 상태 표시 */}\n        {imageError && retryCount >= 3 && (\n          <div className=\"w-full h-48 bg-gray-100 border-2 border-dashed border-gray-300 rounded-md mb-4 flex flex-col items-center justify-center\">\n            <div className=\"text-gray-400 text-2xl mb-2\">📷</div>\n            <div className=\"text-gray-500 text-sm text-center\">\n              이미지를 불러올 수 없습니다\n              <br />\n              <span className=\"text-xs\">네트워크를 확인해주세요</span>\n            </div>\n          </div>\n        )}\n\n        {/* 실제 이미지 */}\n        <img\n          key={imageKey}\n          src={`${imageUrl}${imageUrl.includes('?') ? '&' : '?'}t=${imageKey}`}\n          alt={`${name} webcam view`}\n          className={`w-full h-48 object-cover rounded-md mb-4 transition-opacity duration-300 ${\n            imageLoading || imageError ? 'hidden' : 'block'\n          }`}\n          loading=\"lazy\"\n          onLoad={handleImageLoad}\n          onError={handleImageError}\n        />\n\n        {/* 오버레이 정보 - 이미지가 로드된 경우에만 표시 */}\n        {!imageLoading && !imageError && (\n          <>\n            <div className=\"absolute top-2 right-2 bg-black/50 text-white px-2 py-1 rounded text-xs\">\n              {new Date(capture_time).toLocaleTimeString('en-SG')}\n            </div>\n            <div className=\"absolute top-2 left-2 bg-blue-600 text-white px-2 py-1 rounded text-xs capitalize\">\n              {type}\n            </div>\n            <div className=\"absolute bottom-2 right-2 bg-green-600/80 text-white px-2 py-1 rounded text-xs\">\n              🔴 LIVE (30초 새로고침)\n            </div>\n          </>\n        )}\n\n        {/* 재시도 중 표시 */}\n        {imageError && retryCount < 3 && (\n          <div className=\"absolute top-2 left-2 bg-yellow-600 text-white px-2 py-1 rounded text-xs\">\n            재시도 중... ({retryCount + 1}/3)\n          </div>\n        )}\n      </div>\n\n      <h3 className=\"text-lg font-semibold mb-2\">{name}</h3>\n      <p className=\"text-sm text-gray-600 mb-2\">{location}</p>\n\n      {file_info && (\n        <p className=\"text-xs text-gray-500 mb-3\">\n          Size: {Math.round(file_info.size / 1024)}KB\n        </p>\n      )}\n\n      {ai_analysis && ai_analysis.analysis_available && (\n        <div className=\"border-t pt-3\">\n          <p className=\"text-sm text-gray-700\">\n            <span className=\"font-medium\">AI Analysis:</span> {ai_analysis.analysis}\n          </p>\n        </div>\n      )}\n\n      {ai_analysis && !ai_analysis.analysis_available && (\n        <div className=\"border-t pt-3\">\n          <p className=\"text-xs text-gray-500\">\n            AI Analysis: {ai_analysis.reason}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nWebcamCard.propTypes = {\n  webcam: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    location: PropTypes.string.isRequired,\n    file_info: PropTypes.shape({\n      source_url: PropTypes.string,\n      url: PropTypes.string,\n      path: PropTypes.string,\n      size: PropTypes.number,\n    }),\n    ai_analysis: PropTypes.shape({\n      analysis_available: PropTypes.bool,\n      analysis: PropTypes.string,\n      reason: PropTypes.string,\n    }),\n    capture_time: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n  }).isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default WebcamCard;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nconst LiveWebcamFeed = ({ webcam }) => {\n  const { name, location, file_info } = webcam;\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [imageUrl, setImageUrl] = useState('');\n  const [updateTime, setUpdateTime] = useState(new Date());\n\n  // 이미지 URL 생성\n  const basePath = import.meta.env.BASE_URL || '/';\n  const baseImageUrl = file_info?.source_url || file_info?.url ||\n    (file_info?.path ? `${basePath}${file_info.path}` : `${basePath}images/placeholder.jpg`);\n\n  useEffect(() => {\n    let interval;\n\n    if (isPlaying) {\n      // 실시간 효과를 위해 5초마다 이미지 업데이트\n      interval = setInterval(() => {\n        const timestamp = Date.now();\n        setImageUrl(`${baseImageUrl}${baseImageUrl.includes('?') ? '&' : '?'}t=${timestamp}`);\n        setUpdateTime(new Date());\n      }, 5000);\n    }\n\n    return () => {\n      if (interval) {clearInterval(interval);}\n    };\n  }, [isPlaying, baseImageUrl]);\n\n  // 초기 이미지 설정\n  useEffect(() => {\n    setImageUrl(`${baseImageUrl}${baseImageUrl.includes('?') ? '&' : '?'}t=${Date.now()}`);\n  }, [baseImageUrl]);\n\n  return (\n    <div className=\"bg-gray-900 rounded-lg overflow-hidden\">\n      <div className=\"relative aspect-video\">\n        <img\n          src={imageUrl}\n          alt={`${name} live view`}\n          className=\"w-full h-full object-cover\"\n        />\n\n        {/* 실시간 표시 오버레이 */}\n        <div className=\"absolute top-4 left-4 flex items-center space-x-2\">\n          <span className={`inline-block w-3 h-3 rounded-full ${isPlaying ? 'bg-red-600 animate-pulse' : 'bg-gray-600'}`}></span>\n          <span className=\"text-white text-sm font-medium\">\n            {isPlaying ? 'LIVE' : 'PAUSED'}\n          </span>\n        </div>\n\n        {/* 컨트롤 버튼 */}\n        <div className=\"absolute bottom-4 left-4 right-4 flex items-center justify-between\">\n          <button\n            onClick={() => setIsPlaying(!isPlaying)}\n            className=\"bg-white/20 backdrop-blur-sm text-white px-4 py-2 rounded-lg hover:bg-white/30 transition-colors\"\n          >\n            {isPlaying ? '⏸ 일시정지' : '▶ 재생'}\n          </button>\n\n          <div className=\"text-white text-sm\">\n            마지막 업데이트: {updateTime.toLocaleTimeString('ko-KR')}\n          </div>\n        </div>\n\n        {/* 위치 정보 */}\n        <div className=\"absolute top-4 right-4 bg-black/50 backdrop-blur-sm text-white px-3 py-1 rounded\">\n          <p className=\"text-xs\">{location}</p>\n        </div>\n      </div>\n\n      {/* 정보 패널 */}\n      <div className=\"p-4 bg-gray-800 text-white\">\n        <h3 className=\"text-lg font-semibold mb-2\">{name}</h3>\n        <p className=\"text-sm text-gray-400\">\n          {isPlaying\n            ? '5초마다 자동으로 이미지가 새로고침됩니다.'\n            : '재생 버튼을 눌러 실시간 업데이트를 시작하세요.'}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nLiveWebcamFeed.propTypes = {\n  webcam: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    location: PropTypes.string.isRequired,\n    file_info: PropTypes.shape({\n      source_url: PropTypes.string,\n      url: PropTypes.string,\n      path: PropTypes.string,\n    }),\n  }).isRequired,\n};\n\nexport default LiveWebcamFeed;","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport WebcamCard from './WebcamCard';\nimport WebcamModal from './WebcamModal';\nimport LiveWebcamFeed from './LiveWebcamFeed';\n\nconst WebcamGallery = ({ data }) => {\n  const [selectedWebcam, setSelectedWebcam] = useState(null);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [viewMode, setViewMode] = useState('grid'); // 'grid' or 'live'\n\n  if (!data || !data.captures || data.captures.length === 0) {\n    return (\n      <div className=\"card\">\n        <p className=\"text-gray-500 text-center\">No webcam data available</p>\n      </div>\n    );\n  }\n\n  // 성공한 캡처만 필터링\n  const successfulCaptures = data.captures.filter(capture => capture.status === 'success');\n\n  if (successfulCaptures.length === 0) {\n    return (\n      <div className=\"card\">\n        <p className=\"text-gray-500 text-center\">No webcam images captured successfully</p>\n        <p className=\"text-sm text-gray-400 text-center mt-2\">\n          {data.failed_captures} cameras failed to capture\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-sm text-gray-600\">\n              Last captured: {new Date(data.timestamp).toLocaleString('en-SG')}\n            </p>\n            <p className=\"text-xs text-gray-500\">\n              {data.successful_captures}/{data.total_cameras} cameras active\n            </p>\n          </div>\n          <div className=\"flex space-x-2\">\n            <button\n              onClick={() => setViewMode('grid')}\n              className={`px-3 py-1 rounded text-sm transition-colors ${\n                viewMode === 'grid'\n                  ? 'bg-blue-600 text-white'\n                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n              }`}\n            >\n              📷 그리드 보기\n            </button>\n            <button\n              onClick={() => setViewMode('live')}\n              className={`px-3 py-1 rounded text-sm transition-colors ${\n                viewMode === 'live'\n                  ? 'bg-red-600 text-white'\n                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n              }`}\n            >\n              🔴 라이브 모드\n            </button>\n          </div>\n        </div>\n\n        {viewMode === 'grid' ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {successfulCaptures.map((capture, index) => (\n              <WebcamCard\n                key={capture.id}\n                webcam={capture}\n                onClick={() => {\n                  setSelectedWebcam(capture);\n                  setCurrentIndex(index);\n                }}\n              />\n            ))}\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 gap-6\">\n            {successfulCaptures.map((capture) => (\n              <LiveWebcamFeed\n                key={capture.id}\n                webcam={capture}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n\n      {selectedWebcam && (\n        <WebcamModal\n          item={selectedWebcam}\n          items={successfulCaptures}\n          currentIndex={currentIndex}\n          type=\"webcam\"\n          onClose={() => {\n            setSelectedWebcam(null);\n            setCurrentIndex(0);\n          }}\n          onNavigate={(newIndex) => {\n            setCurrentIndex(newIndex);\n            setSelectedWebcam(successfulCaptures[newIndex]);\n          }}\n        />\n      )}\n    </>\n  );\n};\n\nWebcamGallery.propTypes = {\n  data: PropTypes.shape({\n    captures: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        location: PropTypes.string.isRequired,\n        file_info: PropTypes.object,\n        ai_analysis: PropTypes.object,\n        capture_time: PropTypes.string.isRequired,\n        type: PropTypes.string.isRequired,\n      }),\n    ).isRequired,\n    timestamp: PropTypes.string,\n    successful_captures: PropTypes.number,\n    failed_captures: PropTypes.number,\n    total_cameras: PropTypes.number,\n  }).isRequired,\n};\n\nexport default WebcamGallery;"],"names":["WebcamCard","webcam","onClick","name","location","file_info","ai_analysis","capture_time","type","imageKey","setImageKey","React","imageLoading","setImageLoading","imageError","setImageError","retryCount","setRetryCount","basePath","imageUrl","handleImageLoad","handleImageError","prev","interval","jsxs","jsx","Fragment","PropTypes","LiveWebcamFeed","isPlaying","setIsPlaying","useState","setImageUrl","updateTime","setUpdateTime","baseImageUrl","useEffect","timestamp","WebcamGallery","data","selectedWebcam","setSelectedWebcam","currentIndex","setCurrentIndex","viewMode","setViewMode","successfulCaptures","capture","index","WebcamModal","newIndex"],"mappings":"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"}