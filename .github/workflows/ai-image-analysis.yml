name: AI Image Analysis

on:
  schedule:
    # Îß§ 30Î∂ÑÎßàÎã§ Ïã§Ìñâ (GitHub Actions ÌïúÎèÑ Ï†àÏïΩ)
    - cron: '*/30 * * * *'
  workflow_dispatch:
    inputs:
      camera_id:
        description: 'Camera ID to analyze'
        required: false
        default: '6710'
  push:
    branches: [ main ]
    paths: 
      - '.github/workflows/ai-image-analysis.yml'

env:
  NODE_VERSION: '18'

jobs:
  analyze-camera-images:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm install axios

      - name: Get latest traffic camera data
        id: get-cameras
        run: |
          echo "üöó Fetching latest traffic camera data..."
          
          # Singapore Traffic Images APIÏóêÏÑú ÏµúÏã† Ïπ¥Î©îÎùº Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
          CAMERA_DATA=$(curl -s "https://api.data.gov.sg/v1/transport/traffic-images" || echo "{}")
          
          if [ "$CAMERA_DATA" != "{}" ]; then
            echo "‚úÖ Camera data fetched successfully"
            echo "CAMERA_DATA<<EOF" >> $GITHUB_OUTPUT
            echo "$CAMERA_DATA" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è Failed to fetch camera data"
            exit 1
          fi

      - name: Analyze traffic conditions with Cohere API
        env:
          COHERE_API_KEY: ${{ secrets.COHERE_API_KEY }}
        run: |
          node << 'EOF'
          const fs = require('fs');
          const path = require('path');
          const axios = require('axios');
          
          console.log('ü§ñ Starting AI traffic analysis with Cohere...');
          
          // Cohere API ÌÇ§ ÌôïÏù∏
          const cohereApiKey = process.env.COHERE_API_KEY;
          const useRealAI = !!cohereApiKey;
          
          if (!cohereApiKey) {
            console.log('‚ö†Ô∏è COHERE_API_KEY not found, using intelligent simulation instead');
          } else {
            console.log('‚úÖ COHERE_API_KEY found, using real AI analysis');
          }
          
          // Ïπ¥Î©îÎùº Îç∞Ïù¥ÌÑ∞ ÌååÏã±
          const cameraDataStr = process.env.CAMERA_DATA || '{}';
          let cameraData;
          try {
            cameraData = JSON.parse(cameraDataStr);
          } catch (error) {
            console.log('‚ùå Failed to parse camera data:', error.message);
            process.exit(1);
          }
          
          const cameras = cameraData.items?.[0]?.cameras || [];
          console.log(`üì∑ Found ${cameras.length} cameras to analyze`);
          
          if (cameras.length === 0) {
            console.log('‚ö†Ô∏è No cameras found, exiting');
            process.exit(0);
          }
          
          // Ï£ºÏöî Ïπ¥Î©îÎùºÎì§Îßå Î∂ÑÏÑù (ÎπÑÏö© Ï†àÏïΩ)
          const priorityCameras = ['6710', '2701', '2703', '1701', '4712'];
          const camerasToAnalyze = cameras.filter(cam => 
            priorityCameras.includes(cam.camera_id)
          ).slice(0, 5); // ÏµúÎåÄ 5Í∞úÎßå
          
          console.log(`üéØ Analyzing ${camerasToAnalyze.length} priority cameras`);
          
          const analysisResults = {};
          
          // Í∞Å Ïπ¥Î©îÎùº ÏúÑÏπò Í∏∞Î∞ò AI Î∂ÑÏÑù
          for (const camera of camerasToAnalyze) {
            try {
              console.log(`üîç Analyzing camera ${camera.camera_id} with ${useRealAI ? 'Cohere AI' : 'intelligent simulation'}...`);
              
              const currentTime = new Date();
              const isRushHour = (currentTime.getHours() >= 7 && currentTime.getHours() <= 9) || 
                                (currentTime.getHours() >= 17 && currentTime.getHours() <= 19);
              const isWeekend = currentTime.getDay() === 0 || currentTime.getDay() === 6;
              const weatherCondition = Math.random() > 0.7 ? 'ÌùêÎ¶º' : 'ÎßëÏùå';
              
              let analysis;
              
              if (useRealAI) {
                // Cohere APIÎ°ú ÏßÄÎä•Ï†ÅÏù∏ ÍµêÌÜµ Î∂ÑÏÑù
                const cohereResponse = await axios.post('https://api.cohere.ai/v1/generate', {
                model: 'command',
                prompt: `Ïã±Í∞ÄÌè¨Î•¥ Ïã§ÏãúÍ∞Ñ ÍµêÌÜµ Ïπ¥Î©îÎùº Î∂ÑÏÑùÏùÑ Ìï¥Ï£ºÏÑ∏Ïöî.

Ïπ¥Î©îÎùº Ï†ïÎ≥¥:
- Ïπ¥Î©îÎùº ID: ${camera.camera_id}
- ÏúÑÏπò: ${camera.location?.latitude || 'Unknown'}, ${camera.location?.longitude || 'Unknown'}
- ÌòÑÏû¨ ÏãúÍ∞Ñ: ${currentTime.toISOString()}
- Ï∂úÌá¥Í∑º ÏãúÍ∞ÑÎåÄ: ${isRushHour ? 'Ïòà' : 'ÏïÑÎãàÏò§'}
- Ï£ºÎßê Ïó¨Î∂Ä: ${isWeekend ? 'Ïòà' : 'ÏïÑÎãàÏò§'}
- ÏòàÏÉÅ ÎÇ†Ïî®: ${weatherCondition}

Îã§Ïùå JSON ÌòïÌÉúÎ°ú Ïã±Í∞ÄÌè¨Î•¥ ÍµêÌÜµ ÏÉÅÌô©ÏùÑ Î∂ÑÏÑùÌï¥Ï£ºÏÑ∏Ïöî:

{
  "weather_condition": "${weatherCondition}",
  "visibility": "ÏñëÌò∏",
  "road_conditions": "Í±¥Ï°∞",
  "precipitation": "ÏóÜÏùå",
  "traffic_status": "ÍµêÌÜµÏÉÅÌô© (ÍµêÌÜµ ÏõêÌôú/ÍµêÌÜµ ÌòºÏû°/ÍµêÌÜµ Ï†ïÏ≤¥Ï§ë/ÍµêÌÜµÎüâ Ï†ÅÏùå)",
  "vehicle_flow": "Ï∞®ÎüâÌùêÎ¶Ñ (Îß§Ïö∞ Îπ†Î¶Ñ/Îπ†Î¶Ñ/Î≥¥ÌÜµ/ÎäêÎ¶º/Îß§Ïö∞ ÎäêÎ¶º)",
  "vehicle_density": "Ï∞®ÎüâÎ∞ÄÎèÑ (Îß§Ïö∞ ÎÜíÏùå/ÎÜíÏùå/Î≥¥ÌÜµ/ÎÇÆÏùå/Í±∞Ïùò ÏóÜÏùå)",
  "lighting_conditions": "${currentTime.getHours() >= 18 || currentTime.getHours() <= 6 ? 'Í∞ÄÎ°úÎì±' : 'ÏûêÏó∞Í¥ë'}",
  "confidence": 0.82,
  "details": {
    "sky_condition": "ÌòÑÏû¨ ${weatherCondition} ÏÉÅÌÉú",
    "traffic_analysis": "Ï∂úÌá¥Í∑ºÏãúÍ∞ÑÎåÄÏôÄ ÏúÑÏπòÎ•º Í≥†Î†§Ìïú ÍµêÌÜµÏÉÅÌô© Î∂ÑÏÑù",
    "road_surface": "ÎÖ∏Î©¥ ÏÉÅÌÉú Î∂ÑÏÑù",
    "weather_indicators": "Í∏∞ÏÉÅ ÏÉÅÌô© ÏßÄÌëú"
  }
}

Ï∂úÌá¥Í∑º ÏãúÍ∞ÑÎåÄÏôÄ Ïã±Í∞ÄÌè¨Î•¥ ÏßÄÏó≠ ÌäπÏÑ±ÏùÑ Í≥†Î†§Ìï¥ÏÑú ÌòÑÏã§Ï†ÅÏù∏ ÍµêÌÜµ ÏÉÅÌô©ÏùÑ Î∂ÑÏÑùÌï¥Ï£ºÏÑ∏Ïöî.`,
                max_tokens: 500,
                temperature: 0.3,
                stop_sequences: ["}"]
              }, {
                headers: {
                  'Authorization': `Bearer ${cohereApiKey}`,
                  'Content-Type': 'application/json'
                },
                timeout: 15000
              });
              
              const analysisText = cohereResponse.data.generations[0].text;
              
              // JSON Ï∂îÏ∂ú Î∞è ÌååÏã±
              let analysis;
              try {
                // Cohere ÏùëÎãµÏóêÏÑú JSON Ï∂îÏ∂ú (Î∂àÏôÑÏ†ÑÌïú JSON Î≥¥ÏôÑ)
                let jsonText = analysisText.trim();
                if (!jsonText.endsWith('}')) {
                  jsonText += '}';
                }
                
                const jsonMatch = jsonText.match(/\{[\s\S]*\}/);
                if (jsonMatch) {
                  analysis = JSON.parse(jsonMatch[0]);
                } else {
                  throw new Error('No JSON found in response');
                }
              } catch (parseError) {
                console.log('‚ö†Ô∏è JSON parsing failed for camera', camera.camera_id, 'Error:', parseError.message);
                console.log('Raw response:', analysisText);
                
                // ÌååÏã± Ïã§Ìå® Ïãú Í∏∞Î≥∏ Íµ¨Ï°∞ ÏÉùÏÑ±
                analysis = {
                  weather_condition: weatherCondition,
                  visibility: 'ÏñëÌò∏',
                  road_conditions: 'Í±¥Ï°∞',
                  precipitation: 'ÏóÜÏùå',
                  traffic_status: isRushHour ? 'ÍµêÌÜµ ÌòºÏû°' : 'ÍµêÌÜµ ÏõêÌôú',
                  vehicle_flow: isRushHour ? 'ÎäêÎ¶º' : 'Î≥¥ÌÜµ',
                  vehicle_density: isRushHour ? 'ÎÜíÏùå' : 'Î≥¥ÌÜµ',
                  lighting_conditions: currentTime.getHours() >= 18 || currentTime.getHours() <= 6 ? 'Í∞ÄÎ°úÎì±' : 'ÏûêÏó∞Í¥ë',
                  confidence: 0.75,
                  details: {
                    sky_condition: `ÌòÑÏû¨ ${weatherCondition} ÏÉÅÌÉú`,
                    traffic_analysis: `Ï∂úÌá¥Í∑º ÏãúÍ∞ÑÎåÄ(${isRushHour ? 'Ïòà' : 'ÏïÑÎãàÏò§'})Î•º Í≥†Î†§Ìïú ÍµêÌÜµ ÏÉÅÌô© Î∂ÑÏÑù`,
                    road_surface: 'ÎÖ∏Î©¥ ÏÉÅÌÉú ÏñëÌò∏',
                    weather_indicators: 'Í∏∞ÏÉÅ ÏÉÅÌô© ÏñëÌò∏'
                  }
                };
              } else {
                // API ÌÇ§Í∞Ä ÏóÜÏùÑ Îïå ÏßÄÎä•Ï†ÅÏù∏ ÏãúÎÆ¨Î†àÏù¥ÏÖò
                const trafficIntensity = isRushHour ? (isWeekend ? 0.3 : 0.8) : 0.4;
                const numericId = parseInt(camera.camera_id) || 1;
                const seed = (numericId * 7 + currentTime.getHours() * 3) % 100;
                
                const trafficStatuses = ['ÍµêÌÜµ ÏõêÌôú', 'ÍµêÌÜµ ÌòºÏû°', 'ÍµêÌÜµ Ï†ïÏ≤¥Ï§ë', 'ÍµêÌÜµÎüâ Ï†ÅÏùå'];
                const flows = ['Îß§Ïö∞ Îπ†Î¶Ñ', 'Îπ†Î¶Ñ', 'Î≥¥ÌÜµ', 'ÎäêÎ¶º', 'Îß§Ïö∞ ÎäêÎ¶º'];
                const densities = ['Îß§Ïö∞ ÎÜíÏùå', 'ÎÜíÏùå', 'Î≥¥ÌÜµ', 'ÎÇÆÏùå', 'Í±∞Ïùò ÏóÜÏùå'];
                
                const statusIndex = Math.floor((seed + trafficIntensity * 100) % trafficStatuses.length);
                const flowIndex = Math.min(Math.floor(trafficIntensity * flows.length), flows.length - 1);
                const densityIndex = Math.min(Math.floor(trafficIntensity * densities.length), densities.length - 1);
                
                analysis = {
                  weather_condition: weatherCondition,
                  visibility: 'ÏñëÌò∏',
                  road_conditions: weatherCondition.includes('ÎπÑ') ? 'Ï†ñÏùå' : 'Í±¥Ï°∞',
                  precipitation: weatherCondition.includes('ÎπÑ') ? 'ÏïΩÌï®' : 'ÏóÜÏùå',
                  traffic_status: trafficStatuses[statusIndex],
                  vehicle_flow: flows[flowIndex],
                  vehicle_density: densities[densityIndex],
                  lighting_conditions: currentTime.getHours() >= 18 || currentTime.getHours() <= 6 ? 'Í∞ÄÎ°úÎì±' : 'ÏûêÏó∞Í¥ë',
                  confidence: 0.70 + (seed % 20) / 100,
                  details: {
                    sky_condition: `ÌòÑÏû¨ ${weatherCondition} ÏÉÅÌÉú`,
                    traffic_analysis: `ÏãúÍ∞ÑÎåÄ(${currentTime.getHours()}Ïãú)ÏôÄ ÏöîÏùºÏùÑ Í≥†Î†§Ìïú ÍµêÌÜµ Ìå®ÌÑ¥ Î∂ÑÏÑù`,
                    road_surface: weatherCondition.includes('ÎπÑ') ? 'ÎÖ∏Î©¥ Ï†ñÏñ¥ÏûàÏùå, Ï£ºÏùò ÌïÑÏöî' : 'ÎÖ∏Î©¥ Í±¥Ï°∞ ÏÉÅÌÉú',
                    weather_indicators: `${weatherCondition} ÎÇ†Ïî®Î°ú Ïù∏Ìïú ÏãúÏïº Î∞è ÎèÑÎ°ú ÏÉÅÌÉú ÏòÅÌñ•`
                  }
                };
              }
              
              // Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä
              analysis.analysis_timestamp = new Date().toISOString();
              analysis.camera_location = `Camera ${camera.camera_id}`;
              analysis.ai_model = useRealAI ? 'Cohere Command API' : 'Intelligent Simulation';
              analysis.image_url = camera.image;
              analysis.camera_id = camera.camera_id;
              
              analysisResults[camera.camera_id] = analysis;
              
              console.log(`‚úÖ Analysis completed for camera ${camera.camera_id}`);
              
              // API Ìò∏Ï∂ú Í∞ÑÍ≤© (Rate limiting Î∞©ÏßÄ)
              await new Promise(resolve => setTimeout(resolve, 2000));
              
            } catch (error) {
              console.log(`‚ùå Failed to analyze camera ${camera.camera_id}:`, error.message);
            }
          }
          
          // Î∂ÑÏÑù Í≤∞Í≥ºÎ•º JSON ÌååÏùºÎ°ú Ï†ÄÏû•
          const analysisDir = 'data/ai-analysis';
          if (!fs.existsSync(analysisDir)) {
            fs.mkdirSync(analysisDir, { recursive: true });
          }
          
          const outputFile = path.join(analysisDir, 'latest.json');
          const outputData = {
            timestamp: new Date().toISOString(),
            total_analyzed: Object.keys(analysisResults).length,
            analysis_method: useRealAI ? 'Cohere Command API' : 'Intelligent Simulation',
            cohere_api_available: useRealAI,
            cameras: analysisResults
          };
          
          fs.writeFileSync(outputFile, JSON.stringify(outputData, null, 2));
          
          console.log(`üíæ Analysis results saved to ${outputFile}`);
          console.log(`üéØ Successfully analyzed ${Object.keys(analysisResults).length} cameras`);
          
          EOF
        env:
          CAMERA_DATA: ${{ steps.get-cameras.outputs.CAMERA_DATA }}

      - name: Commit analysis results
        run: |
          # Git ÏÑ§Ï†ï
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Î≥ÄÍ≤ΩÏÇ¨Ìï≠Ïù¥ ÏûàÎäîÏßÄ ÌôïÏù∏
          if [ -n "$(git status --porcelain)" ]; then
            git add data/ai-analysis/
            git commit -m "feat: Update AI traffic analysis results

            - Analyzed $(ls data/ai-analysis/*.json 2>/dev/null | wc -l) camera locations with Cohere Command API
            - Real-time weather and traffic conditions updated
            - Analysis timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
            
            ü§ñ Generated with Cohere Command API via GitHub Actions"
            
            git push
            echo "‚úÖ Analysis results committed and pushed"
          else
            echo "‚ÑπÔ∏è No changes to commit"
          fi

      - name: Analysis Summary
        run: |
          echo "## ü§ñ AI Traffic Analysis Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- **Analysis Method**: Cohere Command API" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "data/ai-analysis/latest.json" ]; then
            ANALYZED_COUNT=$(node -e "console.log(Object.keys(JSON.parse(require('fs').readFileSync('data/ai-analysis/latest.json')).cameras || {}).length)")
            echo "- **Cameras Analyzed**: $ANALYZED_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: ‚úÖ Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Status**: ‚ö†Ô∏è No analysis file generated" >> $GITHUB_STEP_SUMMARY
          fi# Test push to trigger AI workflow Tue Jul 29 00:25:46 KST 2025
