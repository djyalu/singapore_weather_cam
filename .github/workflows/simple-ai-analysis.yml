name: Simple AI Analysis

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'  # 6ÏãúÍ∞ÑÎßàÎã§ Ïã§Ìñâ (ÌïòÎ£® 4Ìöå)
  push:
    branches: [ main ]
    paths: 
      - '.github/workflows/simple-ai-analysis.yml'

jobs:
  analyze:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install axios

      - name: Simple AI Analysis
        env:
          COHERE_API_KEY: ${{ secrets.COHERE_API_KEY }}
        run: |
          node << 'EOF'
          const fs = require('fs');
          const axios = require('axios');
          
          (async () => {
          console.log('ü§ñ Starting Simple AI Analysis...');
          
          const cohereApiKey = process.env.COHERE_API_KEY;
          const useRealAI = !!cohereApiKey;
          
          console.log('API Key available:', useRealAI);
          
          // Simple priority cameras
          const priorityCameras = ['6710', '2701', '2703', '1701', '4712'];
          const analysisResults = {};
          
          for (const cameraId of priorityCameras) {
            console.log(`Analyzing camera ${cameraId}...`);
            
            const currentTime = new Date();
            const isRushHour = (currentTime.getHours() >= 7 && currentTime.getHours() <= 9) || 
                              (currentTime.getHours() >= 17 && currentTime.getHours() <= 19);
            
            let analysis;
            
            if (useRealAI) {
              try {
                console.log('Using Cohere API...');
                
                const response = await axios.post('https://api.cohere.ai/v1/generate', {
                  model: 'command',
                  prompt: `Singapore traffic camera ${cameraId} analysis. Current time: ${currentTime.toISOString()}. Rush hour: ${isRushHour}. 
                  
                  Provide a JSON response with:
                  {
                    "weather_condition": "ÎßëÏùå or ÌùêÎ¶º or Î∂ÄÎ∂ÑÏ†ÅÏúºÎ°ú ÌùêÎ¶º",
                    "traffic_status": "ÍµêÌÜµ ÏõêÌôú or ÍµêÌÜµ ÌòºÏû° or ÍµêÌÜµ Ï†ïÏ≤¥Ï§ë",
                    "vehicle_flow": "Îπ†Î¶Ñ or Î≥¥ÌÜµ or ÎäêÎ¶º",
                    "confidence": 0.85
                  }`,
                  max_tokens: 200,
                  temperature: 0.3
                }, {
                  headers: {
                    'Authorization': `Bearer ${cohereApiKey}`,
                    'Content-Type': 'application/json'
                  },
                  timeout: 10000
                });
                
                const responseText = response.data.generations[0].text.trim();
                console.log('Cohere response:', responseText);
                
                // Try to parse JSON
                const jsonMatch = responseText.match(/\{[\s\S]*\}/);
                if (jsonMatch) {
                  analysis = JSON.parse(jsonMatch[0]);
                } else {
                  throw new Error('No JSON in response');
                }
                
                analysis.ai_model = 'Cohere Command API';
                
              } catch (error) {
                console.log('Cohere API error:', error.message);
                
                // Fallback
                analysis = {
                  weather_condition: 'ÎßëÏùå',
                  traffic_status: isRushHour ? 'ÍµêÌÜµ ÌòºÏû°' : 'ÍµêÌÜµ ÏõêÌôú',
                  vehicle_flow: isRushHour ? 'ÎäêÎ¶º' : 'Î≥¥ÌÜµ',
                  confidence: 0.75,
                  ai_model: 'Cohere Command API (Fallback)'
                };
              }
            } else {
              // No API key
              analysis = {
                weather_condition: 'ÎßëÏùå',
                traffic_status: 'Ï†ïÎ≥¥ ÏóÜÏùå',
                vehicle_flow: 'Ïïå Ïàò ÏóÜÏùå',
                confidence: 0.70,
                ai_model: 'Simulation'
              };
            }
            
            // Add metadata
            analysis.analysis_timestamp = currentTime.toISOString();
            analysis.camera_id = cameraId;
            analysis.visibility = 'ÏñëÌò∏';
            analysis.road_conditions = 'Í±¥Ï°∞';
            
            analysisResults[cameraId] = analysis;
            
            // Rate limiting
            await new Promise(resolve => setTimeout(resolve, 1000));
          }
          
          // Save results
          if (!fs.existsSync('data')) {
            fs.mkdirSync('data', { recursive: true });
          }
          if (!fs.existsSync('data/ai-analysis')) {
            fs.mkdirSync('data/ai-analysis', { recursive: true });
          }
          
          const outputData = {
            timestamp: new Date().toISOString(),
            total_analyzed: Object.keys(analysisResults).length,
            analysis_method: useRealAI ? 'Cohere Command API' : 'Simulation',
            cohere_api_available: useRealAI,
            cameras: analysisResults
          };
          
          fs.writeFileSync('data/ai-analysis/latest.json', JSON.stringify(outputData, null, 2));
          
          console.log('‚úÖ Analysis completed successfully');
          console.log('Cameras analyzed:', Object.keys(analysisResults).length);
          })().catch(error => {
            console.error('‚ùå Simple AI Analysis failed:', error);
            process.exit(1);
          });
          
          EOF

      - name: Commit results
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if [ -n "$(git status --porcelain)" ]; then
            git add data/ai-analysis/latest.json
            git commit -m "feat: Update AI traffic analysis results (Simple)

            ü§ñ Generated with Simple AI Analysis workflow"
            git push
            echo "‚úÖ Results committed and pushed"
          else
            echo "‚ÑπÔ∏è No changes to commit"
          fi