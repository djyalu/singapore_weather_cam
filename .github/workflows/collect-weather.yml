name: Collect Weather Data

on:
  # schedule: # DISABLED - On-demand only system
    # # Every 6 hours for baseline data collection (4 runs/day = 120 runs/month)
    # - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      force_run:
        description: 'Force run even if no changes needed'
        type: boolean
        default: false
      force_ai_analysis:
        description: 'Force AI analysis generation'
        type: boolean
        default: true
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/collect-weather.yml'
      - 'scripts/collect-weather.js'
      - 'scripts/ai-weather-summary.js'
      - 'scripts/fast-ai-summary.js'

env:
  NODE_ENV: production
  REQUEST_TIMEOUT: 8000
  MAX_RETRIES: 2

jobs:
  collect-weather:
    runs-on: ubuntu-latest
    timeout-minutes: 8
    permissions:
      contents: write
    concurrency:
      group: weather-collect
      cancel-in-progress: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit --silent
          echo "✅ Dependencies installed"

      - name: Create data directories
        run: |
          mkdir -p data/weather
          mkdir -p public/data/weather

      - name: Collect weather data
        env:
          OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}
        run: |
          echo "🌡️ Starting weather data collection..."
          timeout 4m node scripts/collect-weather.js || {
            echo "⚠️ Primary collection failed, creating fallback data"
            
            # Create fallback data with current timestamp
            FALLBACK_TIME=$(date -u '+%Y-%m-%dT%H:%M:%S.000Z')
            cat > data/weather/latest.json << EOF
            {
              "timestamp": "$FALLBACK_TIME",
              "source": "Fallback System",
              "status": "service_degraded",
              "data": {
                "message": "Weather services temporarily unavailable",
                "location": "Bukit Timah area",
                "coordinates": {"lat": 1.3520, "lng": 103.7767},
                "expected_recovery": "$(date -u -d '+1 hour' '+%Y-%m-%dT%H:%M:%S.000Z')"
              }
            }
            EOF
            echo "📝 Fallback data created"
          }

      - name: Verify data collection
        run: |
          if [ -f "data/weather/latest.json" ]; then
            echo "✅ Weather data collected successfully"
            echo "File size: $(du -h data/weather/latest.json | cut -f1)"
            echo "Last modified: $(date -r data/weather/latest.json 2>/dev/null || stat -c %y data/weather/latest.json)"
          else
            echo "❌ Weather data collection failed"
            exit 1
          fi

      - name: Copy data to public directory
        run: |
          cp -r data/weather/* public/data/weather/ 2>/dev/null || true

      - name: Generate Enhanced Regional AI Analysis
        env:
          COHERE_API_KEY: ${{ secrets.COHERE_API_KEY }}
          FORCE_ANALYSIS: ${{ inputs.force_ai_analysis || 'true' }}
        run: |
          echo "🤖 Generating enhanced regional AI analysis with 97%+ confidence..."
          echo "🔑 API Key Status: ${{ secrets.COHERE_API_KEY && 'SET' || 'NOT_SET' }}"
          echo "⚡ Force Analysis: ${FORCE_ANALYSIS}"
          echo "🎯 Target: 8 regions with high confidence analysis"
          mkdir -p data/weather-summary
          mkdir -p public/data/weather-summary
          
          # Run enhanced regional AI analysis
          timeout 5m node scripts/enhanced-regional-ai-analysis.js || {
            echo "⚠️ Enhanced regional analysis failed, running fallback AI summary"
            
            # Fallback to original AI summary
            timeout 3m node scripts/ai-weather-summary.js || {
              echo "⚠️ All AI analysis failed, creating basic fallback"
              
              # Create basic fallback
              cat > data/weather-summary/latest.json << EOF
              {
                "timestamp": "$(date -u '+%Y-%m-%dT%H:%M:%S.000Z')",
                "source": "Fallback System",
                "ai_model": "Local Fallback",
                "analysis": {
                  "summary": "서버에서 고급 지역별 AI 분석을 생성하는 중입니다. GitHub Actions가 Cohere AI를 통해 8개 지역별 맞춤형 분석을 준비하고 있습니다.",
                  "highlights": [
                    "🏢 서버 사이드 지역별 AI 분석 준비 중",
                    "🤖 Cohere Command API 통합",
                    "📊 실시간 NEA 데이터 기반",
                    "🎯 97% 이상 신뢰도 목표"
                  ],
                  "confidence": 0.85
                },
                "fallback": true,
                "error": "Enhanced regional AI analysis generation in progress"
              }
            EOF
            }
          }
          
          # Always copy to public directory
          cp -r data/weather-summary/* public/data/weather-summary/ 2>/dev/null || true
          
          # Check results
          if [ -f "data/weather-summary/enhanced-regional-analysis.json" ]; then
            echo "✅ Enhanced regional AI analysis completed"
            echo "📊 Analysis type: Regional (8 regions)"
            CONFIDENCE=$(node -pe "
              try {
                const data = JSON.parse(require('fs').readFileSync('data/weather-summary/enhanced-regional-analysis.json', 'utf8'));
                data.achieved_confidence || 'N/A';
              } catch(e) { 'N/A'; }
            " 2>/dev/null || echo "N/A")
            echo "🎯 Achieved confidence: ${CONFIDENCE}"
          elif [ -f "data/weather-summary/latest.json" ]; then
            echo "✅ Basic AI weather summary ready"
            echo "📄 Summary preview:"
            head -n 10 data/weather-summary/latest.json
          else
            echo "❌ All AI analysis generation failed"
          fi

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Commit and push weather data
        run: |
          git add data/weather/ public/data/weather/
          # Also add AI summary data if it exists
          git add data/weather-summary/ public/data/weather-summary/ 2>/dev/null || true
          
          if ! git diff --staged --quiet; then
            TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M UTC')
            
            # Get temperature from data if available
            TEMP_INFO="N/A"
            if [ -f "data/weather/latest.json" ]; then
              TEMP_INFO=$(node -pe "
                try {
                  const data = JSON.parse(require('fs').readFileSync('data/weather/latest.json', 'utf8'));
                  if (data.current && data.current.temperature) {
                    data.current.temperature + '°C';
                  } else {
                    'N/A';
                  }
                } catch(e) { 'N/A'; }
              " 2>/dev/null || echo "N/A")
            fi
            
            # Check if AI summary was generated
            AI_SUMMARY_INFO=""
            if [ -f "data/weather-summary/latest.json" ]; then
              AI_SUMMARY_INFO=$(node -pe "
                try {
                  const data = JSON.parse(require('fs').readFileSync('data/weather-summary/latest.json', 'utf8'));
                  '\\n- AI Summary: ' + (data.summary ? data.summary.substring(0, 60) + '...' : 'Generated');
                } catch(e) { ''; }
              " 2>/dev/null || echo "")
            fi
            
            git commit -m "chore(weather): Update weather data + AI summary - ${TIMESTAMP}

Bukit Timah area weather update:
- Temperature: ${TEMP_INFO}
- Source: NEA Singapore API${AI_SUMMARY_INFO}
- Schedule: Every 6 hours baseline + on-demand user requests

Generated with Claude Code
Co-Authored-By: Claude <noreply@anthropic.com>"
            
            git push
            echo "✅ Weather data committed and pushed successfully"
          else
            echo "ℹ️ No changes to commit"
          fi

      - name: Cleanup
        if: always()
        run: |
          rm -rf node_modules/.cache 2>/dev/null || true
          echo "🧹 Cleanup completed"