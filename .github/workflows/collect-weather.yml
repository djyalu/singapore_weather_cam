name: Collect Weather Data

on:
  schedule:
    # Ultra-optimized: Every 2 hours (12 runs/day = 360 runs/month)
    # Saves 90% of usage: 14,400 → 1,440 minutes/month
    - cron: '0 */2 * * *'
  workflow_dispatch:
    inputs:
      force_run:
        description: 'Force run even if no changes needed'
        type: boolean
        default: false

env:
  NODE_ENV: production
  REQUEST_TIMEOUT: 8000
  MAX_RETRIES: 2

jobs:
  collect-weather:
    runs-on: ubuntu-latest
    timeout-minutes: 4  # Reduced from 10 to 4
    permissions:
      contents: write
    concurrency:
      group: weather-collect
      cancel-in-progress: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 1  # Shallow clone for speed

      - name: Check if run needed
        id: check
        run: |
          # Smart scheduling: Skip during Singapore night hours (22:00-06:00 SGT)
          SGT_HOUR=$(TZ='Asia/Singapore' date +%H)
          if [[ $SGT_HOUR -ge 22 || $SGT_HOUR -lt 6 ]] && [[ "${{ github.event.inputs.force_run }}" != "true" ]]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "🌙 Skipping during Singapore night hours ($SGT_HOUR:00 SGT)"
            exit 0
          fi
          
          # Check if data is fresh enough (< 3 hours old)
          if [[ -f "data/weather/latest.json" && "${{ github.event.inputs.force_run }}" != "true" ]]; then
            AGE=$(($(date +%s) - $(date -r data/weather/latest.json +%s)))
            if [[ $AGE -lt 10800 ]]; then  # 3 hours
              echo "skip=true" >> $GITHUB_OUTPUT
              echo "⏭️ Skipping: Data is fresh ($(($AGE/3600))h old)"
              exit 0
            fi
          fi
          
          echo "skip=false" >> $GITHUB_OUTPUT
          echo "✅ Weather collection needed"

      - name: Setup Node.js and dependencies
        if: steps.check.outputs.skip == 'false'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies (optimized)
        if: steps.check.outputs.skip == 'false'
        run: |
          npm ci --prefer-offline --no-audit --no-fund --silent
          mkdir -p data/weather public/data/weather

      - name: Collect weather data (streamlined)
        if: steps.check.outputs.skip == 'false'
        env:
          OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}
        run: |
          timeout 3m node scripts/collect-weather.js || {
            # Minimal fallback
            echo '{"timestamp":"'$(date -u '+%Y-%m-%dT%H:%M:%S.000Z')'","source":"Fallback","status":"degraded","data":{"message":"Service temporarily unavailable"}}' > data/weather/latest.json
          }

      - name: Verify and commit
        if: steps.check.outputs.skip == 'false'
        run: |
          if [[ -f "data/weather/latest.json" ]]; then
            cp data/weather/latest.json public/data/weather/
            
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action (Optimized)"
            git add data/weather/ public/data/weather/
            
            if ! git diff --staged --quiet; then
              git commit -m "chore(weather): Update weather data - $(date -u '+%Y-%m-%d %H:%M UTC')

🤖 Optimized workflow - 90% usage reduction"
              git push
            fi
          fi

      - name: Cleanup
        if: always() && steps.check.outputs.skip == 'false'
        run: rm -rf node_modules/.cache 2>/dev/null || true