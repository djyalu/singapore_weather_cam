name: Task Orchestration & Management

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Task management action'
        type: choice
        options:
          - status
          - execute
          - analytics
          - delegate
          - validate
        default: status
      task_id:
        description: 'Specific task ID (for execute/validate actions)'
        type: string
      strategy:
        description: 'Execution strategy'
        type: choice
        options:
          - systematic
          - agile
          - enterprise
        default: systematic
      persona:
        description: 'Assigned persona for task execution'
        type: choice
        options:
          - architect
          - performance
          - security
          - analyzer
          - frontend
          - backend
          - qa
        default: analyzer

env:
  NODE_ENV: production
  TASK_SESSION_ID: ${{ github.run_id }}_${{ github.run_attempt }}

jobs:
  task-orchestration:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write
      issues: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit --silent
          echo "‚úÖ Dependencies installed"

      - name: Initialize task management system
        run: |
          echo "üöÄ Initializing Task Management System"
          echo "Action: ${{ github.event.inputs.action }}"
          echo "Strategy: ${{ github.event.inputs.strategy }}"
          echo "Session ID: $TASK_SESSION_ID"
          echo ""
          
          # Create task state directories
          mkdir -p .github/task-state
          mkdir -p .github/task-reports
          
          # Initialize task manager
          node scripts/task-manager.js --initialize

      - name: Execute task management action
        id: task_action
        env:
          ACTION: ${{ github.event.inputs.action }}
          TASK_ID: ${{ github.event.inputs.task_id }}
          STRATEGY: ${{ github.event.inputs.strategy }}
          PERSONA: ${{ github.event.inputs.persona }}
        run: |
          case "$ACTION" in
            "status")
              echo "üìä Getting task status..."
              node -e "
                const { TaskManager } = require('./scripts/task-manager.js');
                (async () => {
                  const tm = new TaskManager();
                  await tm.initialize();
                  const status = await tm.getTaskStatus();
                  console.log(JSON.stringify(status, null, 2));
                })();
              " > .github/task-reports/status-report.json
              
              # Generate markdown report
              node -e "
                const fs = require('fs');
                const status = JSON.parse(fs.readFileSync('.github/task-reports/status-report.json', 'utf8'));
                
                let report = '# Task Status Report\\n\\n';
                report += \`**Session**: \${status.session}\\n\`;
                report += \`**Timestamp**: \${status.timestamp}\\n\\n\`;
                
                report += '## Epic Summary\\n\\n';
                report += '| Epic ID | Title | Status | Completion |\\n';
                report += '|---------|-------|--------|------------|\\n';
                status.hierarchy.epics.forEach(epic => {
                  report += \`| \${epic.id} | \${epic.title} | \${epic.status} | \${(epic.completion * 100).toFixed(1)}% |\\n\`;
                });
                
                report += '\\n## Performance Metrics\\n\\n';
                const metrics = status.analytics;
                report += \`- **Total Tasks**: \${metrics.totalTasks}\\n\`;
                report += \`- **Completed**: \${metrics.completedTasks}\\n\`;
                report += \`- **Completion Rate**: \${(metrics.completionRate * 100).toFixed(1)}%\\n\`;
                report += \`- **Average Duration**: \${Math.round(metrics.averageDuration)}ms\\n\`;
                
                fs.writeFileSync('.github/task-reports/status-report.md', report);
              "
              
              echo "task_status=completed" >> $GITHUB_OUTPUT
              ;;
              
            "execute")
              if [[ -z "$TASK_ID" ]]; then
                echo "‚ùå Task ID required for execute action"
                exit 1
              fi
              
              echo "‚ö° Executing task: $TASK_ID with $STRATEGY strategy"
              
              node -e "
                const { TaskManager } = require('./scripts/task-manager.js');
                (async () => {
                  const tm = new TaskManager();
                  tm.executionStrategy = '$STRATEGY';
                  await tm.initialize();
                  
                  const result = await tm.executeTask('$TASK_ID', {
                    persona: '$PERSONA',
                    strategy: '$STRATEGY'
                  });
                  
                  console.log('Task execution result:', JSON.stringify(result, null, 2));
                  
                  // Save execution report
                  const fs = require('fs');
                  fs.writeFileSync('.github/task-reports/execution-result.json', JSON.stringify(result, null, 2));
                })();
              "
              
              echo "task_execution=completed" >> $GITHUB_OUTPUT
              ;;
              
            "analytics")
              echo "üìà Generating task analytics..."
              
              node -e "
                const { TaskManager } = require('./scripts/task-manager.js');
                (async () => {
                  const tm = new TaskManager();
                  await tm.initialize();
                  await tm.updateAnalytics();
                  
                  const analytics = tm.analytics;
                  console.log('Analytics:', JSON.stringify(analytics, null, 2));
                  
                  // Generate analytics report
                  const fs = require('fs');
                  let report = '# Task Analytics Report\\n\\n';
                  report += \`**Session**: \${analytics.sessionId}\\n\`;
                  report += \`**Session Duration**: \${Math.round(analytics.performanceMetrics.sessionDuration / 1000)}s\\n\\n\`;
                  
                  report += '## Performance Metrics\\n\\n';
                  const metrics = analytics.performanceMetrics;
                  report += \`- **Completion Rate**: \${(metrics.completionRate * 100).toFixed(1)}%\\n\`;
                  report += \`- **Average Task Duration**: \${Math.round(metrics.averageDuration)}ms\\n\`;
                  report += \`- **Total Tasks**: \${metrics.totalTasks}\\n\`;
                  
                  if (analytics.completedTasks.length > 0) {
                    report += '\\n## Recent Completions\\n\\n';
                    analytics.completedTasks.slice(-5).forEach(task => {
                      report += \`- **\${task.taskId}**: \${task.duration}ms (\${task.strategy})\\n\`;
                    });
                  }
                  
                  fs.writeFileSync('.github/task-reports/analytics-report.md', report);
                })();
              "
              
              echo "analytics_generated=true" >> $GITHUB_OUTPUT
              ;;
              
            "validate")
              echo "‚úÖ Validating task completion..."
              
              if [[ -n "$TASK_ID" ]]; then
                node -e "
                  const { TaskManager } = require('./scripts/task-manager.js');
                  (async () => {
                    const tm = new TaskManager();
                    await tm.initialize();
                    
                    const task = tm.taskHierarchy.tasks.get('$TASK_ID');
                    if (task) {
                      const validation = await tm.validateTaskCompletion(task, { type: 'manual_validation' });
                      console.log('Validation result:', JSON.stringify(validation, null, 2));
                    } else {
                      console.log('Task not found: $TASK_ID');
                    }
                  })();
                "
              else
                echo "‚ö†Ô∏è No task ID provided for validation"
              fi
              
              echo "validation_completed=true" >> $GITHUB_OUTPUT
              ;;
              
            *)
              echo "‚ùå Unknown action: $ACTION"
              exit 1
              ;;
          esac

      - name: Update task hierarchy documentation
        if: always()
        run: |
          echo "üìö Updating task hierarchy documentation..."
          
          # Check if task state has changed
          if [[ -f ".github/task-state/current-state.json" ]]; then
            # Update TASKS.md with current state
            node -e "
              const fs = require('fs');
              
              try {
                const state = JSON.parse(fs.readFileSync('.github/task-state/current-state.json', 'utf8'));
                const tasksContent = fs.readFileSync('.github/TASKS.md', 'utf8');
                
                // Add update timestamp
                const updatedContent = tasksContent.replace(
                  /Last Updated: .*/,
                  \`Last Updated: \${new Date().toISOString().split('T')[0]} | Session: \${state.sessionId}\`
                );
                
                fs.writeFileSync('.github/TASKS.md', updatedContent);
                console.log('‚úÖ Task hierarchy documentation updated');
              } catch (error) {
                console.log('‚ö†Ô∏è No task state changes to update');
              }
            "
          fi

      - name: Generate task performance dashboard
        run: |
          echo "üìä Generating task performance dashboard..."
          
          cat > .github/task-reports/dashboard.md << 'EOF'
          # Task Management Dashboard
          
          ## Session Information
          - **Session ID**: ${{ env.TASK_SESSION_ID }}
          - **Action**: ${{ github.event.inputs.action }}
          - **Strategy**: ${{ github.event.inputs.strategy }}
          - **Timestamp**: $(date -u '+%Y-%m-%d %H:%M UTC')
          
          ## Quick Actions
          - [View Task Status](./status-report.md)
          - [View Analytics](./analytics-report.md)
          - [View Task Hierarchy](../TASKS.md)
          
          ## System Integration
          - ‚úÖ **Cross-Session Persistence**: Task state preserved across sessions
          - ‚úÖ **Dependency Management**: Automatic dependency resolution
          - ‚úÖ **Performance Monitoring**: Real-time execution metrics
          - ‚úÖ **Quality Gates**: Validation framework active
          
          ## Recent Activity
          EOF
          
          # Add recent task activity if available
          if [[ -f ".github/task-reports/status-report.json" ]]; then
            echo "- Task status report generated" >> .github/task-reports/dashboard.md
          fi
          
          if [[ -f ".github/task-reports/execution-result.json" ]]; then
            echo "- Task execution completed" >> .github/task-reports/dashboard.md
          fi

      - name: Commit task management updates
        if: always()
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action (Task Management)"
          
          git add .github/task-state/ .github/task-reports/ .github/TASKS.md
          
          if ! git diff --staged --quiet; then
            git commit -m "chore(tasks): Update task management state - $(date -u '+%Y-%m-%d %H:%M UTC')

Action: ${{ github.event.inputs.action }}
Strategy: ${{ github.event.inputs.strategy }}
Session: ${{ env.TASK_SESSION_ID }}

üéØ Enhanced task orchestration system
üìä Cross-session persistence and analytics"
            git push
            echo "‚úÖ Task management state committed"
          else
            echo "‚è≠Ô∏è No task state changes to commit"
          fi

      - name: Upload task artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: task-management-reports
          path: |
            .github/task-reports/
            .github/task-state/
          retention-days: 30

      - name: Create issue for failed tasks
        if: failure() && github.event.inputs.action == 'execute'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üéØ Task Execution Failure - ${context.payload.inputs.task_id || 'Unknown'}`,
              body: `## Task Execution Failure
              
              **Task ID**: ${context.payload.inputs.task_id || 'Not specified'}
              **Strategy**: ${context.payload.inputs.strategy || 'systematic'}
              **Persona**: ${context.payload.inputs.persona || 'analyzer'}
              **Session**: ${process.env.TASK_SESSION_ID}
              **Time**: ${new Date().toISOString()}
              
              ### Actions Required:
              1. Check task dependencies and prerequisites
              2. Review execution logs in workflow run
              3. Validate task definition and criteria
              4. Re-run with different strategy if needed
              
              ### Quick Commands:
              - Check status: \`gh workflow run task-orchestration.yml -f action=status\`
              - View analytics: \`gh workflow run task-orchestration.yml -f action=analytics\`
              - Retry execution: \`gh workflow run task-orchestration.yml -f action=execute -f task_id=${context.payload.inputs.task_id}\`
              
              *Automatically created by Task Orchestration System*`,
              labels: ['task-management', 'execution-failure', 'automated']
            });

      - name: Summary
        if: always()
        run: |
          echo "üéØ Task Management Orchestration Completed"
          echo "========================================="
          echo "Action: ${{ github.event.inputs.action }}"
          echo "Strategy: ${{ github.event.inputs.strategy }}"
          echo "Session: ${{ env.TASK_SESSION_ID }}"
          echo ""
          echo "üìä Reports generated in .github/task-reports/"
          echo "üìÅ Task state persisted in .github/task-state/"
          echo "üìö Documentation updated in .github/TASKS.md"
          echo ""
          if [[ "${{ github.event.inputs.action }}" == "status" ]]; then
            echo "‚úÖ Task status report available"
          elif [[ "${{ github.event.inputs.action }}" == "execute" ]]; then
            echo "‚ö° Task execution attempted"
          elif [[ "${{ github.event.inputs.action }}" == "analytics" ]]; then
            echo "üìà Analytics report generated"
          fi