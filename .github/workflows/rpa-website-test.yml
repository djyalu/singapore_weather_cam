name: RPA Website Testing

on:
  schedule:
    # 매 4시간마다 실행 (사용자 관점에서 웹사이트 테스트)
    - cron: '0 */4 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Test type to run'
        type: choice
        options:
          - full
          - smoke
          - performance
          - accessibility
        default: smoke
      target_url:
        description: 'Target URL to test'
        default: 'https://djyalu.github.io/singapore_weather_cam/'

env:
  NODE_ENV: production
  PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: false

jobs:
  rpa-testing:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: write
      issues: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit --silent
          # Playwright 브라우저 설치
          npx playwright install chromium firefox webkit
          npx playwright install-deps

      - name: Create RPA test results directory
        run: |
          mkdir -p test-results/rpa
          mkdir -p public/test-reports

      - name: RPA Website Testing
        env:
          TARGET_URL: ${{ github.event.inputs.target_url || 'https://djyalu.github.io/singapore_weather_cam/' }}
          TEST_TYPE: ${{ github.event.inputs.test_type || 'smoke' }}
        run: |
          echo "🤖 Starting RPA Website Testing"
          echo "Target URL: $TARGET_URL"
          echo "Test Type: $TEST_TYPE"
          echo ""
          
          # RPA 테스트 스크립트 실행
          timeout 12m node scripts/rpa-website-test.js || {
            echo "❌ RPA testing failed or timed out"
            
            # 기본 결과 파일 생성
            cat > test-results/rpa/results.json << EOF
            {
              "timestamp": "$(date -u '+%Y-%m-%dT%H:%M:%S.000Z')",
              "target_url": "$TARGET_URL",
              "test_type": "$TEST_TYPE",
              "status": "failed",
              "error": "RPA testing timeout or failure",
              "tests": {
                "page_load": {"status": "unknown"},
                "weather_data": {"status": "unknown"},
                "webcam_gallery": {"status": "unknown"},
                "map_functionality": {"status": "unknown"}
              }
            }
            EOF
            
            exit 1
          }

      - name: Process test results
        run: |
          echo "📊 Processing RPA test results..."
          
          if [[ -f "test-results/rpa/results.json" ]]; then
            # 결과 요약 생성
            OVERALL_STATUS=$(node -pe "
              try {
                const results = JSON.parse(require('fs').readFileSync('test-results/rpa/results.json', 'utf8'));
                results.status || 'unknown';
              } catch(e) { 'error'; }
            ")
            
            FAILED_TESTS=$(node -pe "
              try {
                const results = JSON.parse(require('fs').readFileSync('test-results/rpa/results.json', 'utf8'));
                const tests = results.tests || {};
                Object.values(tests).filter(test => test.status === 'failed').length;
              } catch(e) { 0; }
            ")
            
            echo "Overall Status: $OVERALL_STATUS"
            echo "Failed Tests: $FAILED_TESTS"
            
            # 결과를 public 디렉터리에 복사
            cp test-results/rpa/results.json public/test-reports/rpa-latest.json
            
            # 실패한 테스트가 있으면 GitHub Output 설정
            if [[ "$FAILED_TESTS" -gt 0 ]]; then
              echo "has_failures=true" >> $GITHUB_OUTPUT
              echo "failed_count=$FAILED_TESTS" >> $GITHUB_OUTPUT
            else
              echo "has_failures=false" >> $GITHUB_OUTPUT
            fi
            
            echo "overall_status=$OVERALL_STATUS" >> $GITHUB_OUTPUT
          else
            echo "❌ Test results file not found"
            echo "has_failures=true" >> $GITHUB_OUTPUT
            echo "overall_status=error" >> $GITHUB_OUTPUT
          fi

      - name: Generate test report
        run: |
          # 상세 테스트 리포트 생성
          mkdir -p docs
          
          cat > docs/rpa-test-report.md << 'EOF'
          # RPA Website Testing Report
          
          Last Updated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          Target URL: ${{ github.event.inputs.target_url || 'https://djyalu.github.io/singapore_weather_cam/' }}
          Test Type: ${{ github.event.inputs.test_type || 'smoke' }}
          
          ## Test Results Summary
          
          EOF
          
          if [[ -f "test-results/rpa/results.json" ]]; then
            # JSON 결과를 마크다운으로 변환
            node -e "
              try {
                const results = JSON.parse(require('fs').readFileSync('test-results/rpa/results.json', 'utf8'));
                
                console.log('**Overall Status:** ' + (results.status === 'passed' ? '✅ PASSED' : '❌ FAILED'));
                console.log('**Execution Time:** ' + (results.execution_time || 'N/A') + ' ms');
                console.log('**Browser:** ' + (results.browser || 'chromium'));
                console.log('');
                console.log('## Individual Test Results');
                console.log('');
                console.log('| Test | Status | Duration | Details |');
                console.log('|------|--------|----------|---------|');
                
                const tests = results.tests || {};
                Object.entries(tests).forEach(([testName, result]) => {
                  const status = result.status === 'passed' ? '✅' : result.status === 'failed' ? '❌' : '⚠️';
                  const duration = result.duration ? result.duration + 'ms' : 'N/A';
                  const details = result.error || result.details || '-';
                  console.log('| ' + testName.replace(/_/g, ' ') + ' | ' + status + ' | ' + duration + ' | ' + details + ' |');
                });
                
                if (results.performance) {
                  console.log('');
                  console.log('## Performance Metrics');
                  console.log('');
                  Object.entries(results.performance).forEach(([metric, value]) => {
                    console.log('- **' + metric + ':** ' + value);
                  });
                }
                
                if (results.screenshots && results.screenshots.length > 0) {
                  console.log('');
                  console.log('## Screenshots');
                  console.log('');
                  results.screenshots.forEach((screenshot, index) => {
                    console.log('![Screenshot ' + (index + 1) + '](' + screenshot + ')');
                  });
                }
                
              } catch(e) {
                console.log('❌ Error parsing test results: ' + e.message);
              }
            " >> docs/rpa-test-report.md
          else
            echo "❌ No test results available" >> docs/rpa-test-report.md
          fi

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: rpa-test-results
          path: |
            test-results/
            public/test-reports/
          retention-days: 7

      - name: Create issue for failed tests
        if: steps.process.outputs.has_failures == 'true' && github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            // 기존 RPA 테스트 실패 이슈가 있는지 확인
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['rpa-test-failure', 'automated'],
              state: 'open'
            });
            
            // 중복 이슈 생성 방지
            if (issues.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🤖 RPA Website Test Failures Detected`,
                body: `## RPA Website Testing Alert
                
                **Status**: ${{ steps.process.outputs.overall_status }}
                **Failed Tests**: ${{ steps.process.outputs.failed_count || 'Unknown' }}
                **Target URL**: ${{ github.event.inputs.target_url || 'https://djyalu.github.io/singapore_weather_cam/' }}
                **Test Type**: ${{ github.event.inputs.test_type || 'smoke' }}
                **Time**: ${new Date().toISOString()}
                
                ### Quick Actions:
                1. Check the [detailed test report](./docs/rpa-test-report.md)
                2. Download test artifacts from the workflow run
                3. Run manual test: \`gh workflow run rpa-website-test.yml -f test_type=full\`
                4. Check website manually: ${{ github.event.inputs.target_url || 'https://djyalu.github.io/singapore_weather_cam/' }}
                
                ### Common Issues:
                - Page load timeout (check deployment status)
                - Data loading failures (check API status)
                - UI element changes (update test selectors)
                - Network connectivity issues
                
                *This issue was automatically created by [RPA testing workflow](/.github/workflows/rpa-website-test.yml)*
                `,
                labels: ['rpa-test-failure', 'automated', 'testing']
              });
            }

      - name: Commit test results
        if: always()
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action (RPA)"
          
          git add docs/rpa-test-report.md public/test-reports/
          
          if ! git diff --staged --quiet; then
            git commit -m "chore(rpa): Update RPA website test results - $(date -u '+%Y-%m-%d %H:%M UTC')

Status: ${{ steps.process.outputs.overall_status || 'unknown' }}
Test Type: ${{ github.event.inputs.test_type || 'smoke' }}
Target: ${{ github.event.inputs.target_url || 'https://djyalu.github.io/singapore_weather_cam/' }}

🤖 Automated website testing"
            git push
          fi

      - name: Summary
        if: always()
        run: |
          echo "🤖 RPA Website Testing Completed"
          echo "================================="
          echo "Status: ${{ steps.process.outputs.overall_status || 'unknown' }}"
          echo "Target: ${{ github.event.inputs.target_url || 'https://djyalu.github.io/singapore_weather_cam/' }}"
          echo "Type: ${{ github.event.inputs.test_type || 'smoke' }}"
          echo ""
          echo "📊 View full report: docs/rpa-test-report.md"
          echo "📁 Download artifacts from workflow run page"
          echo ""
          if [[ "${{ steps.process.outputs.has_failures }}" == "true" ]]; then
            echo "⚠️ Some tests failed - check the detailed report"
          else
            echo "✅ All tests passed successfully"
          fi