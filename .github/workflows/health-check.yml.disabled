name: System Health Check

on:
  # Temporarily disabled due to YAML syntax issues
  # schedule:
  #   # Run health check once daily (reduced for free tier)
  #   - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of health check'
        required: false
        type: choice
        options:
          - full
          - quick
          - api-only
        default: quick

jobs:
  health-check:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      actions: read
      issues: write  # To create issues if problems found
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit
          
      - name: Run system health check
        id: health
        env:
          CHECK_TYPE: ${{ github.event.inputs.check_type || 'quick' }}
        run: |
          echo "🏥 System Health Check Report"
          echo "=============================="
          echo "Check Type: $CHECK_TYPE"
          echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo ""
          
          # Initialize health score
          HEALTH_SCORE=100
          ISSUES=""
          
          # Check 1: API Availability
          echo "## 1. API Health Checks"
          
          # NEA Weather APIs
          echo "### NEA Singapore APIs:"
          for api in "air-temperature" "relative-humidity" "rainfall"; do
            URL="https://api.data.gov.sg/v1/environment/$api"
            if curl -s --max-time 5 "$URL" > /dev/null 2>&1; then
              echo "✅ $api: Available"
            else
              echo "❌ $api: Unavailable"
              HEALTH_SCORE=$((HEALTH_SCORE - 10))
              ISSUES="${ISSUES}\n- NEA $api API is down"
            fi
          done
          
          # LTA Traffic API
          echo ""
          echo "### LTA Traffic API:"
          if curl -s --max-time 5 "https://api.data.gov.sg/v1/transport/traffic-images" > /dev/null 2>&1; then
            echo "✅ Traffic cameras: Available"
          else
            echo "❌ Traffic cameras: Unavailable"
            HEALTH_SCORE=$((HEALTH_SCORE - 15))
            ISSUES="${ISSUES}\n- LTA Traffic API is down"
          fi
          
          # Check 2: Data Freshness
          echo ""
          echo "## 2. Data Freshness Check"
          
          if [ -f "data/weather/latest.json" ]; then
            WEATHER_AGE=$(($(date +%s) - $(date -r data/weather/latest.json +%s)))
            WEATHER_AGE_HOURS=$((WEATHER_AGE / 3600))
            
            if [ $WEATHER_AGE_HOURS -lt 2 ]; then
              echo "✅ Weather data: ${WEATHER_AGE_HOURS}h old (Fresh)"
            elif [ $WEATHER_AGE_HOURS -lt 6 ]; then
              echo "⚠️  Weather data: ${WEATHER_AGE_HOURS}h old (Stale)"
              HEALTH_SCORE=$((HEALTH_SCORE - 5))
            else
              echo "❌ Weather data: ${WEATHER_AGE_HOURS}h old (Very stale)"
              HEALTH_SCORE=$((HEALTH_SCORE - 10))
              ISSUES="${ISSUES}\n- Weather data is ${WEATHER_AGE_HOURS} hours old"
            fi
          else
            echo "❌ Weather data: Not found"
            HEALTH_SCORE=$((HEALTH_SCORE - 20))
            ISSUES="${ISSUES}\n- Weather data file missing"
          fi
          
          if [ -f "data/webcam/latest.json" ]; then
            WEBCAM_AGE=$(($(date +%s) - $(date -r data/webcam/latest.json +%s)))
            WEBCAM_AGE_HOURS=$((WEBCAM_AGE / 3600))
            
            if [ $WEBCAM_AGE_HOURS -lt 2 ]; then
              echo "✅ Webcam data: ${WEBCAM_AGE_HOURS}h old (Fresh)"
            elif [ $WEBCAM_AGE_HOURS -lt 6 ]; then
              echo "⚠️  Webcam data: ${WEBCAM_AGE_HOURS}h old (Stale)"
              HEALTH_SCORE=$((HEALTH_SCORE - 5))
            else
              echo "❌ Webcam data: ${WEBCAM_AGE_HOURS}h old (Very stale)"
              HEALTH_SCORE=$((HEALTH_SCORE - 10))
              ISSUES="${ISSUES}\n- Webcam data is ${WEBCAM_AGE_HOURS} hours old"
            fi
          else
            echo "❌ Webcam data: Not found"
            HEALTH_SCORE=$((HEALTH_SCORE - 20))
            ISSUES="${ISSUES}\n- Webcam data file missing"
          fi
          
          # Check 3: Build Status
          if [ "$CHECK_TYPE" != "api-only" ]; then
            echo ""
            echo "## 3. Build & Deploy Check"
            
            # Check if dist folder exists and is recent
            if [ -d "dist" ]; then
              DIST_AGE=$(($(date +%s) - $(date -r dist +%s)))
              DIST_AGE_DAYS=$((DIST_AGE / 86400))
              
              if [ $DIST_AGE_DAYS -lt 7 ]; then
                echo "✅ Build artifacts: ${DIST_AGE_DAYS} days old"
              else
                echo "⚠️  Build artifacts: ${DIST_AGE_DAYS} days old (outdated)"
                HEALTH_SCORE=$((HEALTH_SCORE - 5))
              fi
            else
              echo "⚠️  Build artifacts: Not found (expected for source repo)"
            fi
          fi
          
          # Check 4: Dependencies
          if [ "$CHECK_TYPE" = "full" ]; then
            echo ""
            echo "## 4. Dependency Security Check"
            
            AUDIT_RESULT=$(npm audit --json 2>/dev/null || echo '{"vulnerabilities":{}}')
            VULNERABILITIES=$(echo "$AUDIT_RESULT" | node -e "
              const data = JSON.parse(require('fs').readFileSync(0, 'utf8'));
              const vulns = data.metadata?.vulnerabilities || {};
              console.log(JSON.stringify({
                critical: vulns.critical || 0,
                high: vulns.high || 0,
                moderate: vulns.moderate || 0,
                low: vulns.low || 0
              }));
            ")
            
            echo "Security vulnerabilities: $VULNERABILITIES"
            
            CRITICAL=$(echo "$VULNERABILITIES" | jq -r '.critical // 0')
            HIGH=$(echo "$VULNERABILITIES" | jq -r '.high // 0')
            
            if [ "$CRITICAL" -gt 0 ]; then
              HEALTH_SCORE=$((HEALTH_SCORE - 20))
              ISSUES="${ISSUES}\n- $CRITICAL critical vulnerabilities found"
            fi
            
            if [ "$HIGH" -gt 0 ]; then
              HEALTH_SCORE=$((HEALTH_SCORE - 10))
              ISSUES="${ISSUES}\n- $HIGH high vulnerabilities found"
            fi
          fi
          
          # Overall Health Assessment
          echo ""
          echo "## Overall Health Score: ${HEALTH_SCORE}/100"
          
          if [ $HEALTH_SCORE -ge 90 ]; then
            STATUS="✅ HEALTHY"
            STATUS_EMOJI="🟢"
          elif [ $HEALTH_SCORE -ge 70 ]; then
            STATUS="⚠️ DEGRADED"
            STATUS_EMOJI="🟡"
          else
            STATUS="🚨 CRITICAL"
            STATUS_EMOJI="🔴"
          fi
          
          echo "Status: $STATUS"
          
          if [ -n "$ISSUES" ]; then
            echo ""
            echo "## Issues Found:"
            echo -e "$ISSUES"
          fi
          
          # Set outputs
          echo "health_score=$HEALTH_SCORE" >> $GITHUB_OUTPUT
          echo "status=$STATUS" >> $GITHUB_OUTPUT
          echo "status_emoji=$STATUS_EMOJI" >> $GITHUB_OUTPUT
          echo "issues=$ISSUES" >> $GITHUB_OUTPUT
          
      - name: Create health status file
        run: |
          mkdir -p public/api
          cat > public/api/health.json << EOF
          {
            "status": "${{ steps.health.outputs.status }}",
            "score": ${{ steps.health.outputs.health_score }},
            "timestamp": "$(date -u '+%Y-%m-%dT%H:%M:%S.000Z')",
            "checks": {
              "apis": "checked",
              "data_freshness": "checked",
              "build_status": "${{ github.event.inputs.check_type != 'api-only' && 'checked' || 'skipped' }}",
              "dependencies": "${{ github.event.inputs.check_type == 'full' && 'checked' || 'skipped' }}"
            },
            "next_check": "$(date -u -d '+12 hours' '+%Y-%m-%dT%H:%M:%S.000Z')"
          }
          EOF
          
      - name: Create issue if critical
        if: steps.health.outputs.health_score < 70 && github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['health-check', 'automated'],
              state: 'open'
            });
            
            // Don't create duplicate issues
            if (issues.data.length === 0) {
              const healthScore = '${{ steps.health.outputs.health_score }}';
              const status = '${{ steps.health.outputs.status }}';
              const healthIssues = '${{ steps.health.outputs.issues }}';
              
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🚨 System Health Critical: Score ${healthScore}/100`,
                body: `## Automated Health Check Alert
                
The system health check has detected critical issues:

**Health Score**: ${healthScore}/100
**Status**: ${status}
**Time**: ${new Date().toISOString()}

### Issues Found:
${healthIssues}

### Recommended Actions:
1. Check GitHub Actions workflow runs for failures
2. Verify API keys and secrets are properly configured
3. Review recent commits for breaking changes
4. Check external API service status

This issue was automatically created by the [health check workflow](.github/workflows/health-check.yml).
                `,
                labels: ['health-check', 'automated', 'urgent']
              });
            }
            
      - name: Summary
        run: |
          echo "## 📊 Health Check Summary"
          echo ""
          echo "- **Score**: ${{ steps.health.outputs.health_score }}/100"
          echo "- **Status**: ${{ steps.health.outputs.status }}"
          echo "- **Check Type**: ${{ github.event.inputs.check_type || 'quick' }}"
          echo ""
          
          if [ ${{ steps.health.outputs.health_score }} -lt 90 ]; then
            echo "### 💡 Recommendations:"
            echo "1. Run a full health check: \`gh workflow run health-check.yml -f check_type=full\`"
            echo "2. Check recent workflow runs: \`gh run list\`"
            echo "3. Review system logs and error reports"
          fi