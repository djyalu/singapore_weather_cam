version: '3.8'

services:
  postgres:
    image: timescale/timescaledb:latest-pg14
    container_name: sgweather_postgres
    environment:
      POSTGRES_DB: singapore_weather
      POSTGRES_USER: weather_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U weather_user -d singapore_weather"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: sgweather_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: sgweather_backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DATABASE_URL: postgresql://weather_user:${DB_PASSWORD}@postgres:5432/singapore_weather
      REDIS_URL: redis://redis:6379
      NEA_API_KEY: ${NEA_API_KEY}
      PORT: 3001
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./uploads:/app/uploads
    ports:
      - "3001:3001"
    command: npm run dev

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: sgweather_frontend
    depends_on:
      - backend
    environment:
      REACT_APP_API_URL: http://localhost:3001
      REACT_APP_WS_URL: ws://localhost:3001
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    command: npm start

volumes:
  postgres_data:
  redis_data: