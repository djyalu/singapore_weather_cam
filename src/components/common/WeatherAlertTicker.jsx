import React, { useState, useEffect, useRef } from 'react';
import PropTypes from 'prop-types';
import { AlertTriangle, Info, X, RefreshCw } from 'lucide-react';
import neaAlertService from '../../services/neaAlertService';

/**
 * Ïã§ÏãúÍ∞Ñ Í∏∞ÏÉÅ Í≤ΩÎ≥¥ Ìã∞Ïª§ Ïª¥Ìè¨ÎÑåÌä∏
 * NEA APIÎ•º ÌÜµÌï¥ Ìè≠Ïóº, Ìò∏Ïö∞, ÎåÄÍ∏∞Ïßà Îì±Ïùò Í∏¥Í∏â Ï†ïÎ≥¥Î•º Ïä§ÌÅ¨Î°§ ÌòïÌÉúÎ°ú ÌëúÏãú
 */
const WeatherAlertTicker = React.memo(({ className = '', refreshInterval = 300000 }) => {
  const [alerts, setAlerts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isVisible, setIsVisible] = useState(true);
  const [isPaused, setIsPaused] = useState(false);
  const intervalRef = useRef(null);
  const tickerRef = useRef(null);

  // Í≤ΩÎ≥¥ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  const loadAlerts = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const alertData = await neaAlertService.getWeatherAlerts();
      setAlerts(alertData);
      
      console.log('üì° Weather alerts loaded:', alertData.length);
    } catch (err) {
      console.error('üö® Failed to load weather alerts:', err);
      setError(err.message);
      
      // ÏóêÎü¨ Ïãú Í∏∞Î≥∏ Î©îÏãúÏßÄ ÌëúÏãú
      setAlerts([{
        type: 'error',
        priority: 'low',
        icon: '‚ö†Ô∏è',
        message: 'Í∏∞ÏÉÅ Í≤ΩÎ≥¥ Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.',
        timestamp: new Date().toISOString(),
        source: 'System'
      }]);
    } finally {
      setLoading(false);
    }
  };

  // Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ Ïãú Îç∞Ïù¥ÌÑ∞ Î°úÎìú Î∞è Ï£ºÍ∏∞Ï†Å ÏóÖÎç∞Ïù¥Ìä∏
  useEffect(() => {
    loadAlerts();

    // Ï£ºÍ∏∞Ï†Å ÏóÖÎç∞Ïù¥Ìä∏ ÏÑ§Ï†ï
    intervalRef.current = setInterval(loadAlerts, refreshInterval);

    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    };
  }, [refreshInterval]);

  // Í≤ΩÎ≥¥ Ïö∞ÏÑ†ÏàúÏúÑÏóê Îî∞Î•∏ Ïä§ÌÉÄÏùº Í≤∞Ï†ï
  const getAlertStyle = (alert) => {
    const baseClasses = "flex items-center gap-3 px-4 py-2 whitespace-nowrap";
    
    switch (alert.priority) {
      case 'critical':
        return `${baseClasses} bg-red-600 text-white border border-red-500`;
      case 'high':
        return `${baseClasses} bg-orange-500 text-white border border-orange-400`;
      case 'medium':
        return `${baseClasses} bg-yellow-500 text-black border border-yellow-400`;
      case 'low':
        return `${baseClasses} bg-blue-500 text-white border border-blue-400`;
      case 'error':
        return `${baseClasses} bg-gray-500 text-white border border-gray-400`;
      default:
        return `${baseClasses} bg-blue-500 text-white border border-blue-400`;
    }
  };

  // Í≤ΩÎ≥¥ ÏïÑÏù¥ÏΩò Í≤∞Ï†ï
  const getAlertIcon = (alert) => {
    if (alert.type === 'critical' || alert.type === 'warning') {
      return <AlertTriangle className="w-4 h-4 animate-pulse" />;
    }
    return <Info className="w-4 h-4" />;
  };

  // Ìã∞Ïª§ Ïà®Í∏∞Í∏∞/Î≥¥Ïù¥Í∏∞
  const toggleVisibility = () => {
    setIsVisible(!isVisible);
  };

  // Ìã∞Ïª§ ÏùºÏãúÏ†ïÏßÄ/Ïû¨ÏÉù
  const togglePause = () => {
    setIsPaused(!isPaused);
  };

  // ÏàòÎèô ÏÉàÎ°úÍ≥†Ïπ®
  const handleRefresh = () => {
    loadAlerts();
  };

  // Í≤ΩÎ≥¥Í∞Ä ÏóÜÏúºÎ©¥ Î†åÎçîÎßÅÌïòÏßÄ ÏïäÏùå
  if (!isVisible || alerts.length === 0) {
    return null;
  }

  // ÎÜíÏùÄ Ïö∞ÏÑ†ÏàúÏúÑ Í≤ΩÎ≥¥Îßå ÌëúÏãú (ÏµúÎåÄ 5Í∞ú)
  const displayAlerts = alerts
    .filter(alert => alert.priority !== 'low' || alerts.length === 1)
    .slice(0, 5);

  return (
    <div className={`bg-gradient-to-r from-slate-800 via-blue-800 to-indigo-800 border-b border-blue-400/30 shadow-lg ${className}`}>
      <div className="relative overflow-hidden">
        {/* Î∞∞Í≤Ω Ìå®ÌÑ¥ */}
        <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/5 to-transparent"></div>
        
        {/* Ìã∞Ïª§ Ìó§Îçî */}
        <div className="flex items-center justify-between px-4 py-2 bg-black/20 border-b border-white/10">
          <div className="flex items-center gap-3">
            <div className="flex items-center gap-2">
              <div className="w-2 h-2 bg-red-500 rounded-full animate-pulse"></div>
              <span className="text-white font-semibold text-sm">üö® Í∏∞ÏÉÅ Í≤ΩÎ≥¥</span>
            </div>
            <span className="text-blue-200 text-xs">
              {loading ? 'Loading...' : `${displayAlerts.length}Í±¥ ‚Ä¢ NEA Singapore`}
            </span>
          </div>
          
          <div className="flex items-center gap-2">
            <button
              onClick={handleRefresh}
              disabled={loading}
              className="text-white/70 hover:text-white transition-colors p-1 rounded"
              title="ÏÉàÎ°úÍ≥†Ïπ®"
            >
              <RefreshCw className={`w-4 h-4 ${loading ? 'animate-spin' : ''}`} />
            </button>
            <button
              onClick={togglePause}
              className="text-white/70 hover:text-white transition-colors px-2 py-1 text-xs rounded bg-white/10"
              title={isPaused ? "Ïû¨ÏÉù" : "ÏùºÏãúÏ†ïÏßÄ"}
            >
              {isPaused ? '‚ñ∂Ô∏è' : '‚è∏Ô∏è'}
            </button>
            <button
              onClick={toggleVisibility}
              className="text-white/70 hover:text-white transition-colors p-1 rounded"
              title="Îã´Í∏∞"
            >
              <X className="w-4 h-4" />
            </button>
          </div>
        </div>

        {/* Ïä§ÌÅ¨Î°§ Ìã∞Ïª§ ÏòÅÏó≠ */}
        <div className="relative h-12 overflow-hidden">
          {loading ? (
            <div className="flex items-center justify-center h-full">
              <div className="flex items-center gap-2 text-white">
                <RefreshCw className="w-4 h-4 animate-spin" />
                <span className="text-sm">Í∏∞ÏÉÅ Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë...</span>
              </div>
            </div>
          ) : (
            <div 
              ref={tickerRef}
              className={`flex items-center h-full ${isPaused ? '' : 'animate-scroll-left'}`}
              style={{
                animationDuration: `${Math.max(30, displayAlerts.length * 8)}s`,
                animationPlayState: isPaused ? 'paused' : 'running'
              }}
            >
              {displayAlerts.map((alert, index) => (
                <div key={`${alert.timestamp}-${index}`} className={getAlertStyle(alert)}>
                  <span className="text-lg">{alert.icon}</span>
                  {getAlertIcon(alert)}
                  <span className="font-medium">{alert.message}</span>
                  <span className="text-xs opacity-70 ml-2">
                    {new Date(alert.timestamp).toLocaleTimeString('ko-KR', {
                      hour: '2-digit',
                      minute: '2-digit'
                    })}
                  </span>
                </div>
              ))}
              
              {/* Î¨¥Ìïú Ïä§ÌÅ¨Î°§ÏùÑ ÏúÑÌïú Î≥µÏ†ú */}
              {displayAlerts.map((alert, index) => (
                <div key={`duplicate-${alert.timestamp}-${index}`} className={getAlertStyle(alert)}>
                  <span className="text-lg">{alert.icon}</span>
                  {getAlertIcon(alert)}
                  <span className="font-medium">{alert.message}</span>
                  <span className="text-xs opacity-70 ml-2">
                    {new Date(alert.timestamp).toLocaleTimeString('ko-KR', {
                      hour: '2-digit',
                      minute: '2-digit'
                    })}
                  </span>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
});

WeatherAlertTicker.propTypes = {
  className: PropTypes.string,
  refreshInterval: PropTypes.number, // ÏÉàÎ°úÍ≥†Ïπ® Í∞ÑÍ≤© (ms)
};

WeatherAlertTicker.displayName = 'WeatherAlertTicker';

export default WeatherAlertTicker;